name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./backend
      run: go mod download
    
    - name: Verify dependencies
      working-directory: ./backend
      run: go mod verify
    
    - name: Build
      working-directory: ./backend
      run: go build -v ./...
    
    - name: Run tests
      working-directory: ./backend
      run: go test -v -race -timeout 30s ./...
    
    - name: Run tests with coverage
      working-directory: ./backend
      run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.21'
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.out
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Check ESLint config exists
      working-directory: ./frontend
      run: |
        if [ ! -f ".eslintrc.json" ]; then
          echo "ESLint config not found, creating default config..."
          echo '{"extends": ["next/core-web-vitals"]}' > .eslintrc.json
        fi
    
    - name: Type check
      working-directory: ./frontend
      run: npm run type-check
      
    - name: Lint
      working-directory: ./frontend
      run: npm run lint -- --max-warnings 0
      
    - name: Build
      working-directory: ./frontend
      run: npm run build